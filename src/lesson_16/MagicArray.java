package lesson_16;

public class MagicArray {
    int[] array;
    int cursor;

    public MagicArray() {
        array = new int[10];
    }

    // 1. Добавление а массив одного элемента
    void add(int value) {
        // Проверка.Ест ли вообще свободное место во внутреннем масиве,
        // если места нет, то нужно добавить
        if (cursor == array.length - 1) {
            //Расширить массив перед добавлением нового элемента массива
            expandArray();
        }
        array[cursor] = value;
        cursor++;
    }

    //4. Добовляеи в массив сразу несколько значений
    void add(int... numbers) {
        // c numbers  я могу обращаться как со ссылкой на массив int
        //System.out.println("Приняли несколько интов в количестве: " + numbers.length);
        // System.out.println("Есть индекс у каждого инта, как в массиве. По индексом 0: " + numbers[0]);
        for (int i = 0; i < numbers.length; i++) {
            add(numbers[i]);
        }

    }

    // 2. Динамическое изменение размера массива
    void expandArray() {
        System.out.println("Расширяем массив! Курсор: " + cursor);
        /*
        Plan
        -создать новый массив большего размера(в 2 раза больше)
        -переписать в новый массив все значения старого (до курсора)
        -перебросить ссылку
         */

        //-создать новый массив большего размера
        int[] newArray = new int[array.length * 2];

        //переписать в новый массив все значения старого (до курсора)
        for (int i = 0; i < cursor; i++) {
            newArray[i] = array[i];//Переписываю все занчения из старого массива в новый
        }

        //-перебросить ссылку
        array = newArray;//Переменная array хранит ссылку на "новый" массив
        System.out.println("Расширение массива завершено");
    }

    //3. Метод,который будет возвращать строковое представление массива
    //[1, 14, 16] => exsample
    public String toString() {

        if (cursor == 0) return "[]";

        String result = "[";
        for (int i = 0; i < cursor; i++) {
            result = result + array[i] + (i < cursor - 1 ? ", " : " ]");
        }
        return result;

    }

    //5.Текущее количество элементов в массиве
    int size() {
        return cursor;
    }

    //6. Возвращает значение по индексу
    int get(int index) {
        if (index >= 0 && index < cursor) {
            return array[index];
        }
        //Написать код если индекс "не корректный"
        return Integer.MIN_VALUE;

    }

    // Удаление элемента по индексу
    int remove(int index) {
        /*
        1. Проверка индекса на валидность
        2. Удалить значение по индексу
        3. Передвинуть курсор (т.к. кол-во элементов уменьшилось)
        4. Вернуть старое значение
        */

        if (index >= 0 && index < cursor) {
            // Логика удаления
            int value = array[index]; // значение, которое я должен вернуть

            // Перебираем элементы начиная с индекса и перезаписываем значениями из соседней правой ячейки
            for (int i = index; i < cursor - 1; i++) { // граница перебора индексов?
                array[i] = array[i + 1];
            }
            cursor--;

            return value; // возвращаем старое значение

        } else {
//           Индекс не валидный

            return Integer.MIN_VALUE;
        }
    }

    // Поиск по значению. Первое вхождение
    // {1, 100, 5, 5, 100} -> 100 метод вернет индекс первого найдено вхождения = 1
    int indexOf(int value) {
        for (int i = 0; i < cursor; i++) {
            if (array[i] == value) {
                return i;
            }
        }
        return -1;
    }

    // Метод поиска по значению. Поиск последнего вхождения
    // {1, 100, 5, 5, 100} -> 100 метод вернет индекс последнего найдено вхождения = 4
    int lastIndexOf(int value) {

        return -1;
    }

    // Удаление элемента по значению
    boolean removeByValue(int value) {
        /*
        1. Есть ли элемент с таким значение в массиве - indexOf
        2. Если элемента нет - вернуть false
        3. Если элемент есть - удалить и вернуть true - вызвать удаление по индексу
         */
        int index = indexOf(value);
        if (index == -1) return false;

        remove(index);
        return true;
    }

}

/*
1.Добавлять в массив элемент, не думая об индесах, размере массива
2. Динамическое изменение размера массива
3. Метод,который будет возвращать строковое представление массива
4. Добовляеи в массив сразу несколько значений
5. Текущее количество элементов в массиве
6. Возвращает значение по индексу
7. Удаляет элемент по индексу (Есть индекс - удалить это значение в массиве)
8. Конструктор, принимающий массив ++
9. Удаление по значению
10. Поиск по значению. Возвращает индекс ++
 */

